package Algorithms;
package GUI;
package GUI;

package GUI;
import Algorithms.Files;

import Algorithms.Calculator;

import javafx.event.ActionEvent;

import javafx.fxml.FXML;

import javafx.scene.control.Label;
import javafx.application.Application;
import javafx.scene.control.ScrollPane;
import java.io.File;
import javafx.scene.layout.ColumnConstraints;
import javafx.fxml.FXMLLoader;
import javafx.scene.layout.GridPane;
public class Controller {
import javafx.scene.layout.RowConstraints;
import javafx.scene.Parent;

import java.util.ArrayList;
import java.io.FileNotFoundException;
import javafx.scene.Scene;
import java.text.DecimalFormat;
}
import java.util.ArrayList;
import javafx.stage.Stage;




public class mainController {

    @FXML

    private GridPane similarityMatrix;
public class Files {
    @FXML
public class Main extends Application {
    private ScrollPane scrollPane;
    ArrayList<String> file_references = new ArrayList<>();
    private static DecimalFormat twoPoint = new DecimalFormat("#,##0.00");
    @Override
    ArrayList<String> files = new ArrayList<>();
    ArrayList<String> file_name = new ArrayList<>();
    ArrayList<String> fileName = new ArrayList<>();
    public void start(Stage primaryStage) throws Exception{

    File[] files;
    @FXML
        Parent root = FXMLLoader.load(getClass().getResource("Main.fxml"));
    private void checkSimilarity(ActionEvent event) throws FileNotFoundException {
    public ArrayList<String> getFiles(String dir) {
        Calculator calculator = new Calculator();
        primaryStage.setTitle("Similarity Program Commit 13");
        //Get list of file names directory
        //Returns all directory references of the scanned files
        Files dir = new Files();
        primaryStage.setScene(new Scene(root));
        fileName = dir.getFileNames();
        readDirectory(dir);
        files = dir.getFiles("Directory");
        primaryStage.setResizable(false);
        double[][] matrix = calculator.getScore();
        return file_references;

        primaryStage.show();
        /*Set scene details */
    }
        similarityMatrix.setVisible(true);
    }
        scrollPane.setVisible(true);



        //Iterate through all files to get and to print the names
    public ArrayList<String> getFileNames() {
        for (int i = 0; i < files.size(); i++) {

            //Create new column and rows
        //Returns all file names of the scanned files
            similarityMatrix.add(new Label(fileName.get(i)), 0, i + 1);
    public static void main(String[] args) {
            similarityMatrix.add(new Label(fileName.get(i)), i + 1, 0);
        return file_name;

        launch(args);
            //Column formatting
    }
            similarityMatrix.getColumnConstraints().addAll(new ColumnConstraints(45));
    }
            //NOTE: row constraints are required to properly format the the printing of the grid

            similarityMatrix.getRowConstraints().addAll(new RowConstraints(18));
}

    public void readDirectory(String dir) {
            //Iterate through the files
        files = new File(dir).listFiles();
            for (int j = 0; j < files.size(); j++) {
        assert files != null;
                //Print out the corresponding similarity scores
        for (File file : files) {
                Label label = new Label("   "+twoPoint.format(matrix[i][j])+"    ");
            //If file is indeed a file, store file_names and full directory paths
                if(matrix[i][j]==1.0){
            //files = directory reference
                    label.setStyle("-fx-background-color:RED");
            //file_name = display name reference
                    similarityMatrix.add(label, i + 1, j + 1);
            if (file.isFile()) {
                }
                this.file_references.add(file.toString());
                else if(matrix[i][j]<1.0 && matrix[i][j]>=0.75){
                this.file_name.add(" ");
                    label.setStyle("-fx-background-color:ORANGE");
            }
                    similarityMatrix.add(label, i + 1, j + 1);

                }
            //If "file" is directory
                else if(matrix[i][j]<0.75 && matrix[i][j]>=0.50){
            else if (file.isDirectory()) {
                    label.setStyle("-fx-background-color:YELLOW");
                readDirectory(dir + "/" + file.getName());
                    similarityMatrix.add(label, i + 1, j + 1);
                this.file_name.add(file.getName());
                }
            }
                else if(matrix[i][j]<0.50 && matrix[i][j]>=0.25){
        }
                    label.setStyle("-fx-background-color:#ADFF2F");
    }
                    similarityMatrix.add(label, i + 1, j + 1);

                }
}
                else if(matrix[i][j]<0.25 && matrix[i][j]>=0){
                    label.setStyle("-fx-background-color:GREEN");
                    similarityMatrix.add(label, i + 1, j + 1);
                }
            }
        }


    }
}
