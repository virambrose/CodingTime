package sample;
package sample;
package sample;
import java.io.*;



public class Similator{
import javafx.application.Application;
    public static void main (String [] args){
import java.io.*;
        float [][] correlation = new float[36][36];
import javafx.fxml.FXMLLoader;
        String[][] files = {{"Go, J","Submissions/11812249_Module0/LBYCPD2_Module0/src/sample/Main.java"},
import java.util.ArrayList;
                {"Portugal","Submissions/11815027_Mod0/src/main.java"},
import javafx.scene.Parent;
                {"Chua", "Submissions/act1/src/check.java"},
import java.util.Map;
                {"Khow", "Submissions/ACTIVITY 0/src/Compare.java"},
import javafx.scene.Scene;
                {"Bayeta", "Submissions/BayetaExer0/CompareTwoFiles/src/CompareFile.java"},
import java.util.HashMap;
                {"Lopez", "Submissions/Lopez_Module0_CodeComparison/Module0_CodeComparison/src/Main.java"},
import javafx.stage.Stage;
                {"Magallanes", "Submissions/Magallanes_Module0_11828668/LBYCP2D_Module0_11828668/src/Similaritor.java"},

                {"Vicente", "Submissions/Mod1/src/Main.java"},

                {"Magcamit", "Submissions/Module/prog.cpp"},
class Metric
                {"Ongsitco", "Submissions/Module0/src/Compare.java"},
public class Main extends Application {
                {"Regacho", "Submissions/Module0_Regacho/main.cpp"},
{
                {"Vasquez", "Submissions/Module0-Vasquez/src/Module0Vasquez.java"},

                {"Cabato", "Submissions/Module0_CABATO/src/Main.java"},
    public static String filename;
                {"Bombita", "Submissions/Module 0/src/PlagiarismChecker.java"},
    @Override
                {"Go, M", "Submissions/Module 0 2/src/Main.java"},

                {"Sabularse", "Submissions/Module 0 3/src/SoftwareSimilarity.java"},
    public void start(Stage primaryStage) throws Exception{
                {"Antoc", "Submissions/Module 0 4/src/Main.java"},
    public static ArrayList<String> reorderVariables(ArrayList<String> variables)
                {"Co", "Submissions/malcolm_src/FileToString.java"},
        Parent root = FXMLLoader.load(getClass().getResource("start.fxml"));
                {"Caoile", "Submissions/MODULE 0 5/testmain.cpp"},
    {
                {"Megino", "Submissions/ProgramComparison_Megino/programcomparison_Megino.cpp"},
        primaryStage.setTitle("Correlation Matrix");
                {"See", "Submissions/see/Main.java"},
        int[] lengths = new int[variables.size()];
                {"Contreras", "Submissions/Similarity_Checker/src/Compare.java"},
        primaryStage.setScene(new Scene(root));
                {"Solis", "Submissions/Solis-Checker-Module0/Solis-Checker-Module0/src/programChecker.java"},
        for(int i=0;i<variables.size();i++)
                {"Tiu", "Submissions/src/CompareCode.java"},
        primaryStage.show();
                {"Tupal", "Submissions/Submission/Similarity/src/Main.java"},
        {
                {"Chan", "Submissions/CHAN-module0.cpp"},
    }
                {"Chiu", "Submissions/ChiuPlagiarism.java"},
            lengths[i] = variables.get(i).length();
                {"Enghoy", "Submissions/Enghoy_Main.java"},

                {"Gabay", "Submissions/Gabay.0.cpp"},
        }
                {"Llarenas", "Submissions/Llarenas_Main.java"},

                {"Panes", "Submissions/PanesSimilarityChecker.java"},
        for(int i=0;i<lengths.length;i++)
                {"Parco", "Submissions/Parco_main.cpp"},
    public static void main(String[] args) {
                {"Semira", "Submissions/semira_M0.cpp"},
        {
                {"Coteok", "Submissions/TeddyMoss.java"},
        launch(args);
                {"Toro", "Submissions/Toro_Module_0.cpp"},
            for(int j=i+1;j<lengths.length;j++)
                {"Vhong", "Submissions/VHONG-11814888 - Module 0.cpp"}};
    }

            {
        for (int o = 0; o < files.length; o++) {
}
            for (int q = 0; q < files.length; q++) {
                if(lengths[i] < lengths[j])
                String dev1[] = files[o];
                {
                String dev2[] = files[q];
                    int temp = lengths[i];
                String[] first = new String[1000];
                    lengths[i] = lengths[j];
                String[] second = new String[1000];
                    lengths[j] = temp;
                String[] words1 = new String[1000];

                String[] words2 = new String[1000];
                    String tmp_var = variables.get(i);
                int i = 0;
                    variables.set(i,variables.get(j));
                int y = 0;
                    variables.set(j,tmp_var);
                int j = 0;
                }

            }
                File code1 = new File(dev1[1]);
        }
                try (BufferedReader br = new BufferedReader(new FileReader(code1))) {
        return variables;
                    String line;
    }
                    while ((line = br.readLine()) != null) {
    public static ArrayList<String> extractConstants(String line) // extract constants from string
                        first[i] = line;
    {
                        i++;
        boolean continueFlag = false;
                        String[] words = line.split("\\s+");
        ArrayList<String> extracted = new ArrayList<String>();
                        for (int x = 0; x < words.length; x++) {
        String temp = "";
                            words1[y] = words[x];
        for(int i=0;i<line.length();i++)
                            y++;
        {
                        }
            if(line.charAt(i) >= '0' && line.charAt(i) <= '9')
                    }
            {
                } catch (IOException e) {
                if(!continueFlag)
                    e.printStackTrace();
                    continueFlag = !continueFlag;
                }
                temp = temp + line.charAt(i) + "";
                Metric.filename = dev1[1];
            }
                Metric.main(args);
            else

            {
                y = 0;
                if(continueFlag)
                File code2 = new File(dev2[1]);
                {
                try (BufferedReader br = new BufferedReader(new FileReader(code2))) {
                    extracted.add(temp);
                    String line;
                    temp = "";
                    while ((line = br.readLine()) != null) {
                    continueFlag = !continueFlag;
                        second[j] = line;
                }
                        j++;
            }
                        String[] words = line.split("\\s+");
        }
                        for (int x = 0; x < words.length; x++) {
        return extracted;
                            words2[y] = words[x];
    }
                            y++;
    public static Map<String,Integer> getUniqueCount(ArrayList<String> list)
                        }
    {
                    }
        Map<String,Integer> uniqueList = new HashMap<String,Integer>();
                } catch (IOException e) {
        for(int i=0;i<list.size();i++)
                    e.printStackTrace();
        {
                }
            String s = list.get(i);
                Metric.filename = dev2[1];
            if(!uniqueList.containsKey(s))
                Metric.main(args);
            {

                int count = 0;
                float x = 0;
                for(int j=0;j<list.size();j++)
                for (int z = 0; z < i; z++) {
                {
                    for (int n = 0; n < j; n++) {
                    if(list.get(j).equals(s))
                        if (first[z].equals(second[n])) {
                        count++;
                            x++;
                }
                            break;
                uniqueList.put(s, count);
                        }
            }
                    }
        }
                }
        return uniqueList;

    }
                float perLine = (x / i);
    public static void displayMetrics(int N1,int N2,int n1,int n2)
                System.out.print(String.format("%.2f", perLine) + "\t");
    {
                correlation[o][q] = perLine;
        int N,n;
            }
        float V,D,L,E,T,B;
            System.out.print("\n");

        }
        N = N1+N2;
        System.out.println("\n# of Operators | # of Operands | # of unique Oprts | # of unique Opnds | Program Length | Vocabulary Size | " +
        n = n1+n2;
                "Program Volume | Difficulty | Program Level | Effort to Implement | Time to implement | # of delivered bugs ");
        V = N * (float)( Math.log(n) / Math.log(2));

        D = (n1/2)*(N2/n2);
    }
        L = 1/D;
}
        E = V*D;
        T = E/18;
        B = (float)(Math.pow(E, 2/3)/3000);

        System.out.println("\t[N] Program Length      : "+N);
        System.out.println("\t[n] Vocabulary Size     : "+n);
        System.out.println("\t[V] Program Volume      : "+V);
        System.out.println("\t[D] Difficulty          : "+D);
        System.out.println("\t[K] Program Level       : "+L);
        System.out.println("\t[E] Effort to implement : "+E);
        System.out.print("\t[T] Time to implement   : ");
        System.out.format("%-10.5f%n", T);
        System.out.print("\t[B] # of delivered bugs : ");
        System.out.format("%-10.5f%n\n", B);

    }
    public static void main(String[] args)
    {
        try
        {
            String[] keywords = { "scanf","printf","main","static" }; 	// datatypes shouldnt be added to keywords
            String[] datatypes = { "int","float","double","char"};
            ArrayList<String> operators = new ArrayList<String>();
            ArrayList<String> operands = new ArrayList<String>();
            ArrayList<String> variables = new ArrayList<String>();

            int operatorCount = 0, operandCount = 0;
            boolean skipFlag = false;
            BufferedReader reader = new BufferedReader(new FileReader(new File(filename)));
            String line;

            while((line = reader.readLine()) != null)
            {
                line = line.trim();
                for(String keyword : keywords)
                {
                    if(line.startsWith(keyword))
                    {
                        line = line.substring(0+keyword.length());
                        operators.add(keyword);
                        operatorCount++;
                    }
                }
                for(String datatype : datatypes)
                {
                    if(line.startsWith(datatype))
                    {
                        operators.add(datatype);
                        operatorCount++;
                        int index = line.indexOf(datatype);
                        line = line.substring(index+datatype.length(),line.length()-1);  // -1 to ignore the semicolon
                        String[] vars = line.split(",");
                        for(String v : vars)
                        {
                            v = v.trim();
                            variables.add(v);
                        }
                    }
                }
                variables = reorderVariables(variables);  // very important !
                skipFlag = false;
                for(int i=0;i<line.length();i++)
                {
                    if(line.charAt(i) >= 'A' && line.charAt(i) <= 'Z' || line.charAt(i) >= 'a' && line.charAt(i) <= 'z' || line.charAt(i) >= '0' && line.charAt(i) <= '9' || line.charAt(i) == ' ' || line.charAt(i) == ',' || line.charAt(i)==';' || line.charAt(i) == '(' || line.charAt(i) == '{')
                    {
                    }
                    else if(line.charAt(i) == ')'  )
                    {
                        if(skipFlag == false)
                        {
                            operatorCount++;
                            operators.add("()");
                        }
                    }
                    else if(line.charAt(i) == '}'  )
                    {
                        if(skipFlag == false)
                        {
                            operatorCount++;
                            operators.add("{}");
                        }
                    }
                    else if(line.charAt(i) == '"')   // for detecting double quotes
                    {
                        skipFlag = !skipFlag;
                        if(skipFlag)
                            operandCount++;
                        else
                        {
                            int startIndex = line.indexOf("\"");
                            int endIndex = line.lastIndexOf("\"");
                            operands.add(line.substring(startIndex,endIndex+1));
                        }
                    }
                    else
                    {
                        if(!skipFlag)
                        {
                            operators.add(line.charAt(i)+"");
                            operatorCount++;
                        }
                    }
                }
                // removing string literals from line if any
                if(line.contains("\""))
                {
                    int startIndex = line.indexOf("\"");
                    int endIndex = line.lastIndexOf("\"");
                    line = line.substring(0, startIndex) + line.substring(endIndex+1);
                }
                for(String variable : variables)
                {
                    while(line.contains(variable))
                    {
                        int index = line.indexOf(variable);
                        line = line.substring(0, index) + line.substring(index+variable.length(), line.length());
                        operands.add(variable);
                        operandCount++;
                    }
                }
                // checking for constants
                operands.addAll(extractConstants(line));
            }
            Map<String,Integer> uniqueOperators = Metric.getUniqueCount(operators);
            Map<String,Integer> uniqueOperands = Metric.getUniqueCount(operands);
            System.out.print(operators.size() + "\t" + operands.size() + "\t" + uniqueOperators.size() + "\t" + uniqueOperands.size());

            displayMetrics(operators.size(),operands.size(),uniqueOperators.size(),uniqueOperands.size());
            reader.close();
        }
        catch(IOException ioe)
        {
            System.out.println(ioe);
        }
    }
}
